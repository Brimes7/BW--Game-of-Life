{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","canvasi","useRef","currentBlock","running","useState","blocky","setBlocky","blockyii","setBlockyii","rows","setRows","columns","setColumns","generation","setGeneration","gameSpeed","setGameSpeed","drawBox","blocks","context","current","getContext","i","z","alive","fillStyle","fillRect","useEffect","push","blocking","gameOfLife","gameBlock","nextBlock","liveBlocks","j","k","e","window","setTimeout","requestAnimationFrame","changeBoard","target","name","value","className","onChange","onClick","Math","random","either","x","floor","clientX","currentTarget","offsetLeft","y","clientY","offsetTop","console","log","ref","width","height","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.10ed5f09.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './App.css';\n\n\nfunction App() {\n    //returns a mutable reference of an object\n    const canvasi = useRef()\n    const currentBlock = useRef()\n    const running = useRef()\n    //Custom Hooks being implemented\n    const [blocky, setBlocky] = useState([])\n    const [blockyii, setBlockyii] = useState([])\n    const [rows, setRows] = useState(25)\n    const [columns, setColumns] = useState(25)\n    const [generation, setGeneration] = useState(0)\n    const [gameSpeed, setGameSpeed] = useState(0)\n    //drawbox functions using canvas\n    const drawBox = (blocks)=>{\n        const context = canvasi.current.getContext(\"2d\")\n\n        for(let i = 0; i < rows; i ++){\n\n            for (let z = 0; z < columns; z ++){\n                if (blocks[i][z].alive){\n                    context.fillStyle=\"purple\"\n                }\n                else{\n                    context.fillStyle=\"black\"\n                }\n                context.fillRect(i*10, z*10, 10, 10);\n            }\n        }\n\n    }\n    useEffect(()=> {\n        //creating our array of elements - PLACEHOLDERS\n        for(let i = 0; i < rows; i ++){\n            blocky.push([])\n            blockyii.push([])\n            //context.fillRect(i*10, 20, 10, 10);\n            for (let z = 0; z < columns; z ++){\n                const blocking = {alive: false}\n                blocky[i].push(blocking)\n                blockyii[i].push({...blocking})\n            }\n        }\n        drawBox(blockyii)\n        currentBlock.current=\"1\"\n        setBlocky(blocky)\n        setBlockyii(blockyii)\n    },[rows, columns])\n\n    const clicki = (either)=> {\n        debugger;\n        if(running.current){\n            return\n        }\n    let x = Math.floor((either.clientX-either.currentTarget.offsetLeft)/10);\n    let y = Math.floor((either.clientY-either.currentTarget.offsetTop)/10);\n\n    blocky[x][y].alive=!blocky[x][y].alive\n        console.log(blocky)\n        drawBox(blocky);\n    }\n\n    const gameOfLife = ()=> {\n        let gameBlock = blocky\n        let nextBlock = blockyii\n        if(currentBlock.current===\"2\"){\n            gameBlock = blockyii;\n            nextBlock = blocky;\n        }\n        //Implementing the double buffer\n        for(let i = 0; i < rows; i ++){\n            for(let z = 0; z < columns; z ++){\n                let liveBlocks = 0;\n                for(let j = (i-1); j < (i + 2); j ++){\n                    for(let k = (z-1); k < (z + 2); k ++){\n                        if(j === i && k === z){\n                            continue;\n                        }\n                        try{\n                        if(gameBlock[j][k] && gameBlock[j][k].alive){\n                            liveBlocks ++;\n                        }}catch(e){\n\n                        }\n                    }\n                }\n                if (gameBlock[i][z].alive){\n                   if(liveBlocks <2 || liveBlocks > 3){\n                       nextBlock[i][z].alive = false\n                   }\n                   else{\n                       nextBlock[i][z].alive = true\n                   }\n                }\n                else{\n                    if(liveBlocks === 3){\n                        nextBlock[i][z].alive = true\n                    }\n                    else{\n                        nextBlock[i][z].alive = false\n                    }\n                }\n            }\n        }\n        drawBox(nextBlock)\n        if(currentBlock.current === \"2\"){\n            currentBlock.current = \"1\";\n        }\n        else{\n            currentBlock.current = \"2\";\n        }\n        if(running.current){\n            window.setTimeout(()=> {\n                requestAnimationFrame(gameOfLife)\n            }, gameSpeed)\n        }\n        setGeneration((generation)=> {\n            return generation +1;\n        })\n    }\n    const changeBoard = (e)=> {\n        if(running.current){\n            return\n        }\n        if(e.target.name===\"rows\"){\n            setRows(e.target.value)\n        }\n        else{\n            setColumns(e.target.value)\n        }\n    }\n    const startGame = ()=> {\n        running.current = true;\n        requestAnimationFrame(gameOfLife)\n    }\n    const stopGame = ()=> {\n        running.current = false;\n    }\n    const clearBoard = ()=> {\n        running.current = false;\n        for(let i = 0; i < rows; i ++){\n            for(let z = 0; z < rows; z ++){\n                blocky[i][z].alive = false\n                blockyii[i][z].alive = false\n            }\n        }\n        drawBox(blocky)\n        setGeneration(0)\n    }\n    //Here is my random Board\n    const randomizeBoard = ()=> {\n        for(let i = 0; i < rows; i ++){\n            for(let z = 0; z < rows; z ++){\n                if (Math.random() < .4){\n                    blocky[i][z].alive = true;\n                }\n                else{\n                    blocky[i][z].alive = false;\n                }\n            }\n        }\n        drawBox(blocky)\n        currentBlock.current = \"1\"\n    }\n    const speed = (e)=> {\n        debugger\n        setGameSpeed(e.target.value)\n    }\n\n  return (\n    <div className=\"bigContainer\">\n      <header className=\"App-header\">\n          Welcome to Trouble's Game of Life!\n          <br/>\n          <div className=\"insideAppHeader\">\n              <label className=\"label\">\n                  Here are a couple rules so you know how this game works!\n                  <br/>\n                  <li> Any live cell with fewer than two live neighbours dies, as if by underpopulation. </li>\n                  <li> Any live cell with two or three live neighbours lives on to the next generation. </li>\n                  <li> Any live cell with more than three live neighbours dies, as if by overpopulation. </li>\n                  <li> Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\n                  <br/>\n                  These rules were created to mimic the behavior of real life.\n                  <br/>\n                  To Continue below pick a board size. The default begins at 25 by 25 and can go as high as your screen allows. Next select a speed at which you would like to see the generations occur. Please note you may change your mind of the speed if you choose one that is faster than you preferred. Next you may either choose to randomize the board or play around with the rules already listed below. Then Click Start to begin and Stop to pause the game. Should you wish to begin again simply click Clear Board and a new generation will begin!\n                  <br/>\n              </label>\n              <label className=\"board\">\n                Rows:\n                <input name={\"rows\"} value={rows} onChange={changeBoard}/>\n              </label>\n\n              <label className=\"board\">\n                  Columns:\n                  <input name={\"col\"} value={columns} onChange={changeBoard}/>\n              </label>\n\n          <div className={\"Row\"}>\n          <label className=\"label\">\n              Game Speed:\n          </label>\n                <select className=\"speeds\" value={gameSpeed} onChange={speed}>\n                  <option value={1000}>Slow</option>\n                  <option value={400} >Normal</option>\n                  <option value={0} >Fast</option>\n                </select>\n            </div>\n          <div className=\"headerButtons\">\n              {/*//Will need to add styling  to this later*/}\n              <button onClick={randomizeBoard}>Randomize Board</button>\n              <button onClick={startGame}>Start</button>\n              <button onClick={stopGame}>Stop</button>\n              <button onClick={clearBoard}>Clear Board</button>\n          </div>\n          Generation: {generation}\n        <canvas onClick={clicki} ref={canvasi} width={(columns * 10) + \"px\"} height={(rows * 10) +\"px\"}/>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}